{
	"$schema": "http://json-schema.org/schema#",
	"$defs": {
		"cidrBlocks": {
			"items": {
				"description": "IPv4 address range, in CIDR notation.",
				"pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(/([0-9]|[1,2][0-9]|[3][0-2]))?$",
				"examples": [
					"10.244.0.0/16"
				],
				"type": "string"
			},
			"type": "array",
			"minItems": 1
		}
	},
	"properties": {
		"cluster": {
			"properties": {
				"kubernetesVersion": {
					"title": "Kubernetes version",
					"type": "string"
				}
			},
			"title": "Cluster",
			"type": "object"
		},
		"apiServer": {
			"properties": {
				"certSANs": {
					"default": [],
					"description": "Alternative names to encode in the API server's certificate.",
					"items": {
						"title": "SAN",
						"type": "string"
					},
					"title": "Subject alternative names (SAN)",
					"type": "array"
				},
				"enableAdmissionPlugins": {
					"default": "NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota,PersistentVolumeClaimResize,DefaultStorageClass,Priority,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook",
					"description": "Comma-separated list of admission plugins to enable.",
					"title": "Admission plugins",
					"type": "string"
				},
				"featureGates": {
					"default": "",
					"description": "Enabled feature gates, as a comma-separated list.",
					"title": "Feature gates",
					"type": "string"
				}
			},
			"required": [
				"enableAdmissionPlugins",
				"featureGates"
			],
			"title": "Kubernetes API server",
			"type": "object"
		},
		"metadata": {
			"type": "object",
			"title": "Metadata",
			"additionalProperties": false,
			"properties": {
				"description": {
					"type": "string",
					"title": "Cluster description",
					"description": "User-friendly description of the cluster's purpose."
				},
				"labels": {
					"type": "object",
					"title": "Labels",
					"description": "These labels are added to the Kubernetes resources defining this cluster.",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-zA-Z0-9/\\._-]+$": {
							"type": "string",
							"title": "Label",
							"maxLength": 63,
							"minLength": 0,
							"pattern": "^[a-zA-Z0-9\\._-]+$"
						}
					}
				},
				"preventDeletion": {
					"type": "boolean",
					"title": "Prevent cluster deletion",
					"default": false
				}
			}
		},
		"controllerManager": {
			"properties": {
				"featureGates": {
					"default": "",
					"description": "Enabled feature gates, as a comma-separated list.",
					"title": "Feature gates",
					"type": "string"
				}
			},
			"required": [
				"featureGates"
			],
			"title": "Kubernetes Controller Manager",
			"type": "object"
		},
		"controlPlane": {
			"properties": {
				"etcd": {
					"properties": {
						"imageRepository": {
							"title": "Image repository",
							"type": "string"
						},
						"imageTag": {
							"title": "Image tag",
							"type": "string"
						}
					},
					"title": "Etcd",
					"type": "object"
				},
				"replicas": {
					"title": "Number of nodes",
					"type": "integer"
				}
			},
			"title": "Control plane",
			"type": "object"
		},
		"connectivity": {
			"properties": {
				"network": {
					"properties": {
						"containerRegistries": {
							"type": "object",
							"title": "Container registries",
							"description": "Endpoints and credentials configuration for container registries.",
							"additionalProperties": {
								"type": "array",
								"items": {
									"type": "object",
									"required": [
										"endpoint"
									],
									"additionalProperties": false,
									"properties": {
										"credentials": {
											"type": "object",
											"title": "Credentials",
											"description": "Credentials for the endpoint.",
											"additionalProperties": false,
											"properties": {
												"auth": {
													"type": "string",
													"title": "Auth",
													"description": "Base64-encoded string from the concatenation of the username, a colon, and the password."
												},
												"identitytoken": {
													"type": "string",
													"title": "Identity token",
													"description": "Used to authenticate the user and obtain an access token for the registry."
												},
												"password": {
													"type": "string",
													"title": "Password",
													"description": "Used to authenticate for the registry with username/password."
												},
												"username": {
													"type": "string",
													"title": "Username",
													"description": "Used to authenticate for the registry with username/password."
												}
											}
										},
										"endpoint": {
											"type": "string",
											"title": "Endpoint",
											"description": "Endpoint for the container registry."
										}
									}
								}
							},
							"default": {}
						},
						"controlPlaneEndpoint": {
							"description": "Kubernetes API configuration.",
							"properties": {
								"host": {
									"title": "Host",
									"description": "IP for access to the Kubernetes API.",
									"type": "string"
								},
								"port": {
									"title": "Port number",
									"description": "Port for access to the Kubernetes API.",
									"type": "integer"
								},
								"ipPoolName": {
									"title": "Ip Pool Name",
									"description": "Ip for control plane will be drawn from this GlobalInClusterIPPool resource.",
									"type": "string",
									"pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
									"default": "wc-cp-ips"
								}
							},
							"title": "Endpoint",
							"type": "object"
						},
						"pods": {
							"properties": {
								"cidrBlocks": {
									"$ref": "#/$defs/cidrBlocks",
									"default": "10.244.0.0/16",
									"title": "Pod subnets"
								}
							},
							"required": [
								"cidrBlocks"
							],
							"title": "Pods",
							"type": "object"
						},
						"services": {
							"properties": {
								"cidrBlocks": {
									"$ref": "#/$defs/cidrBlocks",
									"default": "172.31.0.0/16",
									"title": "Service subnets"
								}
							},
							"required": [
								"cidrBlocks"
							],
							"title": "Services",
							"type": "object"
						},
						"loadBalancers": {
							"anyOf": [
								{
									"properties": {
										"cidrBlocks": {
											"$ref": "#/$defs/cidrBlocks",
											"title": "Load Balancer subnets"
										}
									},
									"required": ["cidrBlocks"]
								},
								{
									"properties": {
										"ipPoolName": {
											"title": "Ip Pool Name",
											"description": "Ip for Service LB running in WC will be drawn from this GlobalInClusterIPPool resource.",
											"type": "string",
											"pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
										}
									},
									"required": ["ipPoolName"]
								}
							],
							"title": "Load balancers",
							"type": "object"
						}
					},
					"required": [
						"pods",
						"services",
						"loadBalancers"
					],
					"title": "Network",
					"type": "object"
				}
			},
			"required": [
				"network"
			],
			"title": "Connectivity",
			"type": "object"
		},
		"internal": {
			"type": "object",
			"additionalProperties": false,
			"properties": {
				"ciliumNetworkPolicy": {
					"type": "object",
					"title": "CiliumNetworkPolicies",
					"properties": {
						"enabled": {
							"type": "boolean",
							"title": "Enable CiliumNetworkPolicies",
							"description": "Installs the network-policies-app (deny all by default) if set to true",
							"default": true
						}
					}
				},
				"teleport": {
					"type": "object",
					"title": "Teleport",
					"properties": {
						"proxyAddr": {
							"type": "string",
							"title": "Teleport proxy address",
							"default": "teleport.giantswarm.io:443"
						},
						"version": {
							"type": "string",
							"title": "Teleport version",
							"default": "14.1.3"
						},
						"enabled": {
							"type": "boolean",
							"title": "Enable teleport",
							"default": true
						}
					}
				},
				"sandboxContainerImage": {
					"type": "object",
					"title": "Sandbox Container image",
					"properties": {
						"name": {
							"type": "string",
							"title": "Repository",
							"default": "tkg/pause"
						},
						"registry": {
							"type": "string",
							"title": "Registry",
							"default": "projects.registry.vmware.com/"
						},
						"tag": {
							"type": "string",
							"title": "Tag",
							"default": "3.7"
						}
					}
				}
			}
		},
		"kubeadm": {
			"properties": {
				"users": {
					"items": {
						"properties": {
							"authorizedKeys": {
								"items": {
									"title": "Key",
									"type": "string"
								},
								"title": "Authorized keys",
								"type": "array"
							},
							"name": {
								"title": "Name",
								"type": "string"
							}
						},
						"type": "object"
					},
					"title": "Users",
					"type": "array"
				}
			},
			"title": "Kubeadm",
			"type": [
				"null",
				"object"
			]
		},
		"kubectlImage": {
			"description": "Used by cluster-shared library chart to configure coredns in-cluster.",
			"properties": {
				"name": {
					"type": "string"
				},
				"registry": {
					"type": "string"
				},
				"tag": {
					"type": "string"
				}
			},
			"title": "Kubectl image",
			"type": "object"
		},
		"organization": {
			"title": "Organization",
			"type": "string"
		},
		"template": {
			"description": "Provisioning options for node templates.",
			"properties": {
				"cloneMode": {
					"description": "Method used to clone template image.",
					"title": "Clone mode",
					"type": "string"
				},
				"diskGiB": {
					"description": "Node disk size in GB. Must be at least as large as the source image.",
					"title": "Disk size (GB)",
					"type": "integer"
				},
				"folder": {
					"description": "VSphere folder to deploy instances in. Must already exist.",
					"title": "Folder",
					"type": "string"
				},
				"memoryMiB": {
					"description": "Node memory allocation in MB.",
					"title": "Memory (MB)",
					"type": "integer"
				},
				"networkName": {
					"description": "Segment name to attach nodes to. Must already exist.",
					"title": "Segment name",
					"type": "string"
				},
				"numCPUs": {
					"description": "Number of CPUs to assign per node.",
					"title": "CPU cores",
					"type": "integer"
				},
				"resourcePool": {
					"description": "Resource pool to allocate nodes from. Must already exist.",
					"title": "Resource pool",
					"type": "string"
				},
				"storagePolicyName": {
					"description": "Storage policy to use. If specified, it must already exist.",
					"title": "Storage policy",
					"type": "string"
				},
				"templateName": {
					"description": "Image template name to use for nodes.",
					"title": "Name",
					"type": "string"
				}
			},
			"title": "Node template",
			"type": "object"
		},
		"vcenter": {
			"description": "Configuration for vSphere API access.",
			"properties": {
				"datacenter": {
					"description": "Name of the datacenter to deploy nodes into.",
					"title": "Datacenter",
					"type": "string"
				},
				"datastore": {
					"description": "Name of the datastore for node disk storage.",
					"title": "Datastore",
					"type": "string"
				},
				"server": {
					"description": "URL of the VSphere API.",
					"title": "Server",
					"type": "string"
				},
				"username": {
					"description": "Username for the VSphere API.",
					"title": "Username",
					"type": "string"
				},
				"password": {
					"description": "Password for the VSphere API.",
					"title": "Password",
					"type": "string"
				},
				"thumbprint": {
					"description": "TLS certificate signature of the VSphere API.",
					"title": "Thumbprint",
					"type": "string"
				},
				"region": {
					"description": "Category name in VSphere for topology.kubernetes.io/region labels.",
					"title": "Region",
					"type": "string"
				},
				"zone": {
					"description": "Category name in VSphere for topology.kubernetes.io/zone labels.",
					"title": "Zone",
					"type": "string"
				}
			},
			"title": "VCenter",
			"type": "object"
		},
		"worker": {
			"properties": {
				"replicas": {
					"title": "Number of nodes",
					"type": "integer"
				}
			},
			"title": "Worker",
			"type": "object"
		}
	},
	"type": "object"
}
