{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$defs": {
        "cidrBlocks": {
            "type": "array",
            "items": {
                "type": "string",
                "description": "IPv4 address range, in CIDR notation.",
                "examples": [
                    "10.244.0.0/16"
                ],
                "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(/([0-9]|[1,2][0-9]|[3][0-2]))?$"
            },
            "minItems": 1
        },
        "cloneMode": {
            "type": "string",
            "title": "VM template clone mode",
            "enum": [
                "fullClone",
                "linkedClone"
            ],
            "default": "linkedClone"
        },
        "diskGiB": {
            "type": "integer",
            "title": "Disk size",
            "examples": [
                30
            ],
            "exclusiveMinimum": 0
        },
        "machineHealthCheck": {
            "type": "object",
            "title": "Machine health check",
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "title": "Enabled",
                    "description": "Enable machine health checks.",
                    "default": true
                },
                "maxUnhealthy": {
                    "type": "string",
                    "title": "Max unhealthy",
                    "description": "Maximum number or percentage of unhealthy nodes.",
                    "default": "40%"
                },
                "nodeStartupTimeout": {
                    "type": "string",
                    "title": "Node startup timeout",
                    "description": "Time to wait for a node to become healthy.",
                    "default": "20m0s"
                },
                "unhealthyNotReadyTimeout": {
                    "type": "string",
                    "title": "Unhealthy not ready timeout",
                    "description": "Time to wait for a node to become ready.",
                    "default": "10m0s"
                },
                "unhealthyUnknownTimeout": {
                    "type": "string",
                    "title": "Unhealthy unknown timeout",
                    "description": "Time to wait for a node to become known.",
                    "default": "10m0s"
                }
            }
        },
        "memoryGiB": {
            "type": "integer",
            "title": "Memory size",
            "examples": [
                8192
            ],
            "minimum": 8192
        },
        "network": {
            "type": "object",
            "title": "Network configuration",
            "additionalProperties": false,
            "properties": {
                "devices": {
                    "type": "array",
                    "title": "Network devices",
                    "description": "Network interface configuration for VMs.",
                    "additionalProperties": false,
                    "items": {
                        "type": "object",
                        "title": "Devices",
                        "required": [
                            "networkName"
                        ],
                        "additionalProperties": false,
                        "properties": {
                            "dhcp4": {
                                "type": "boolean",
                                "title": "IPv4 DHCP",
                                "description": "Is DHCP enabled on this segment."
                            },
                            "networkName": {
                                "type": "string",
                                "title": "Segment name",
                                "description": "Segment name to attach nodes to. Must already exist."
                            }
                        }
                    }
                }
            }
        },
        "numCPUs": {
            "type": "integer",
            "title": "Number of CPUs",
            "examples": [
                6
            ],
            "minimum": 2
        },
        "resourcePool": {
            "type": "string",
            "title": "VSphere resource pool name",
            "default": "*/Resources"
        },
        "template": {
            "type": "string",
            "title": "VM template"
        }
    },
    "type": "object",
    "additionalProperties": false,
    "properties": {
        "baseDomain": {
            "type": "string",
            "title": "Base DNS domain"
        },
        "cluster": {
            "type": "object",
            "title": "Cluster",
            "description": "Helm values for the provider-independent cluster chart.",
            "default": {
                "internal": {
                    "advancedConfiguration": {
                        "controlPlane": {
                            "apiServer": {
                                "extraArgs": {
                                    "requestheader-allowed-names": "front-proxy-client"
                                }
                            }
                        }
                    }
                },
                "providerIntegration": {
                    "apps": {
                        "capiNodeLabeler": {
                            "enable": true
                        },
                        "certExporter": {
                            "configTemplateName": "vSphereCertExporterHelmValues",
                            "enable": true
                        },
                        "certManager": {
                            "configTemplateName": "vSphereCertManagerHelmValues",
                            "enable": true
                        },
                        "chartOperatorExtensions": {
                            "enable": true
                        },
                        "cilium": {
                            "configTemplateName": "vSphereCiliumHelmValues",
                            "enable": true
                        },
                        "ciliumServiceMonitors": {
                            "enable": true
                        },
                        "coreDns": {
                            "enable": true
                        },
                        "coreDnsExtensions": {
                            "enable": true
                        },
                        "etcdDefrag": {
                            "enable": true
                        },
                        "etcdKubernetesResourcesCountExporter": {
                            "enable": true
                        },
                        "k8sDnsNodeCache": {
                            "enable": true
                        },
                        "metricsServer": {
                            "enable": true
                        },
                        "netExporter": {
                            "enable": true
                        },
                        "networkPolicies": {
                            "configTemplateName": "vSphereNetworkPoliciesHelmValues",
                            "enable": true
                        },
                        "nodeExporter": {
                            "configTemplateName": "vSphereNodeExporterHelmValues",
                            "enable": true
                        },
                        "observabilityBundle": {
                            "enable": true
                        },
                        "observabilityPolicies": {
                            "enable": true
                        },
                        "securityBundle": {
                            "enable": true
                        },
                        "teleportKubeAgent": {
                            "enable": true
                        },
                        "verticalPodAutoscaler": {
                            "enable": true
                        },
                        "verticalPodAutoscalerCrd": {
                            "enable": true
                        }
                    },
                    "controlPlane": {
                        "kubeadmConfig": {
                            "files": [
                                {
                                    "contentFrom": {
                                        "secret": {
                                            "key": "content",
                                            "name": "kubevip-pod",
                                            "prependClusterNameAsPrefix": true
                                        }
                                    },
                                    "path": "/etc/kubernetes/manifests/kube-vip.yaml",
                                    "permissions": "0600"
                                }
                            ],
                            "postKubeadmCommands": [
                                "sed --in-place \"s|/etc/kubernetes/super-admin.conf|/etc/kubernetes/admin.conf|g\" /etc/kubernetes/manifests/kube-vip.yaml"
                            ]
                        },
                        "resources": {
                            "infrastructureMachineTemplate": {
                                "group": "infrastructure.cluster.x-k8s.io",
                                "kind": "VSphereMachineTemplate",
                                "version": "v1beta1"
                            },
                            "infrastructureMachineTemplateSpecTemplateName": "controlplane-vspheremachinetemplate-spec"
                        }
                    },
                    "environmentVariables": {
                        "hostName": "COREOS_CUSTOM_HOSTNAME",
                        "ipv4": "COREOS_CUSTOM_IPV4"
                    },
                    "kubeadmConfig": {
                        "enableGiantswarmUser": true,
                        "files": [
                            {
                                "contentFrom": {
                                    "secret": {
                                        "key": "set-hostname.sh",
                                        "name": "provider-specific-files-1",
                                        "prependClusterNameAsPrefix": true
                                    }
                                },
                                "path": "/opt/bin/set-hostname.sh",
                                "permissions": "0755"
                            }
                        ],
                        "ignition": {
                            "containerLinuxConfig": {
                                "additionalConfig": {
                                    "systemd": {
                                        "units": [
                                            {
                                                "contents": {
                                                    "install": {
                                                        "wantedBy": [
                                                            "multi-user.target"
                                                        ]
                                                    },
                                                    "unit": {
                                                        "description": "VMWare metadata agent"
                                                    }
                                                },
                                                "dropins": [
                                                    {
                                                        "contents": "[Unit]\nAfter=nss-lookup.target\nAfter=network-online.target\nWants=network-online.target\n[Service]\nType=oneshot\nRestart=on-failure\nRemainAfterExit=yes\nEnvironment=OUTPUT=/run/metadata/coreos\nExecStart=/usr/bin/mkdir --parent /run/metadata\nExecStart=/usr/bin/bash -cv 'echo \"COREOS_CUSTOM_HOSTNAME=$(\"$(find /usr/bin /usr/share/oem -name vmtoolsd -type f -executable 2>/dev/null | head -n 1)\" --cmd \"info-get guestinfo.metadata\" | base64 -d | awk \\'/local-hostname/ {print $2}\\' | tr -d \\'\"\\')\" >> ${OUTPUT}'\nExecStart=/usr/bin/bash -cv 'echo \"COREOS_CUSTOM_IPV4=$(\"$(find /usr/bin /usr/share/oem -name vmtoolsd -type f -executable 2>/dev/null | head -n 1)\" --cmd \"info-get guestinfo.ip\")\" >> ${OUTPUT}'",
                                                        "name": "10-coreos-metadata.conf"
                                                    }
                                                ],
                                                "enabled": true,
                                                "name": "coreos-metadata.service"
                                            },
                                            {
                                                "contents": {
                                                    "install": {
                                                        "wantedBy": [
                                                            "multi-user.target"
                                                        ]
                                                    },
                                                    "unit": {
                                                        "description": "Set machine hostname"
                                                    }
                                                },
                                                "dropins": [
                                                    {
                                                        "contents": "[Unit]\nRequires=coreos-metadata.service\nAfter=coreos-metadata.service\nBefore=teleport.service\n[Service]\nType=oneshot\nRemainAfterExit=yes\nEnvironmentFile=/run/metadata/coreos\nExecStart=/opt/bin/set-hostname.sh",
                                                        "name": "10-set-hostname.conf"
                                                    }
                                                ],
                                                "enabled": true,
                                                "name": "set-hostname.service"
                                            },
                                            {
                                                "contents": {
                                                    "install": {
                                                        "wantedBy": [
                                                            "default.target"
                                                        ]
                                                    },
                                                    "unit": {
                                                        "description": "Disable TCP segmentation offloading"
                                                    }
                                                },
                                                "dropins": [
                                                    {
                                                        "contents": "[Unit]\nAfter=network.target\n[Service]\nType=oneshot\nRemainAfterExit=yes\nExecStart=/usr/sbin/ethtool -K ens192 tx-udp_tnl-csum-segmentation off\nExecStart=/usr/sbin/ethtool -K ens192 tx-udp_tnl-segmentation off",
                                                        "name": "10-ethtool-segmentation.conf"
                                                    }
                                                ],
                                                "enabled": true,
                                                "name": "ethtool-segmentation.service"
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "postKubeadmCommands": [
                            "usermod -aG root nobody"
                        ]
                    },
                    "pauseProperties": {
                        "global.connectivity.network.controlPlaneEndpoint.host": ""
                    },
                    "provider": "vsphere",
                    "resourcesApi": {
                        "bastionResourceEnabled": false,
                        "cleanupHelmReleaseResourcesEnabled": true,
                        "helmRepositoryResourcesEnabled": true,
                        "infrastructureCluster": {
                            "group": "infrastructure.cluster.x-k8s.io",
                            "kind": "VSphereCluster",
                            "version": "v1beta1"
                        },
                        "infrastructureMachinePool": {
                            "group": "infrastructure.cluster.x-k8s.io",
                            "kind": "VSphereMachineTemplate",
                            "version": "v1beta1"
                        },
                        "nodePoolKind": "MachineDeployment"
                    },
                    "useReleases": true,
                    "workers": {
                        "defaultNodePools": {
                            "def00": {
                                "cloneMode": "linkedClone",
                                "machineHealthCheck": {
                                    "enabled": true,
                                    "maxUnhealthy": "40%",
                                    "nodeStartupTimeout": "20m0s",
                                    "unhealthyNotReadyTimeout": "10m0s",
                                    "unhealthyUnknownTimeout": "10m0s"
                                },
                                "memoryMiB": 16896,
                                "network": {},
                                "numCPUs": 6,
                                "replicas": 2,
                                "resourcePool": "*/Resources",
                                "template": ""
                            }
                        },
                        "resources": {
                            "infrastructureMachineTemplateSpecTemplateName": "worker-vspheremachinetemplate-spec"
                        }
                    }
                }
            }
        },
        "cluster-shared": {
            "type": "object",
            "title": "Library chart"
        },
        "global": {
            "type": "object",
            "title": "Properties that are available to all charts and subcharts",
            "required": [
                "metadata",
                "release"
            ],
            "properties": {
                "components": {
                    "type": "object",
                    "title": "Components",
                    "description": "Advanced configuration of components that are running on all nodes.",
                    "additionalProperties": false,
                    "properties": {
                        "containerd": {
                            "type": "object",
                            "title": "Containerd",
                            "description": "Configuration of containerd.",
                            "required": [
                                "containerRegistries"
                            ],
                            "additionalProperties": false,
                            "properties": {
                                "containerRegistries": {
                                    "type": "object",
                                    "title": "Container registries",
                                    "description": "Endpoints and credentials configuration for container registries.",
                                    "additionalProperties": {
                                        "type": "array",
                                        "title": "Registries",
                                        "description": "Container registries and mirrors",
                                        "items": {
                                            "type": "object",
                                            "title": "Registry",
                                            "required": [
                                                "endpoint"
                                            ],
                                            "properties": {
                                                "credentials": {
                                                    "type": "object",
                                                    "title": "Credentials",
                                                    "properties": {
                                                        "auth": {
                                                            "type": "string",
                                                            "title": "Auth",
                                                            "description": "Base64-encoded string from the concatenation of the username, a colon, and the password."
                                                        },
                                                        "identitytoken": {
                                                            "type": "string",
                                                            "title": "Identity token",
                                                            "description": "Used to authenticate the user and obtain an access token for the registry."
                                                        },
                                                        "password": {
                                                            "type": "string",
                                                            "title": "Password",
                                                            "description": "Used to authenticate for the registry with username/password."
                                                        },
                                                        "username": {
                                                            "type": "string",
                                                            "title": "Username",
                                                            "description": "Used to authenticate for the registry with username/password."
                                                        }
                                                    }
                                                },
                                                "endpoint": {
                                                    "type": "string",
                                                    "title": "Endpoint",
                                                    "description": "Endpoint for the container registry."
                                                }
                                            }
                                        }
                                    },
                                    "default": {}
                                },
                                "localRegistryCache": {
                                    "type": "object",
                                    "title": "Local registry caches configuration",
                                    "description": "Enable local cache via http://127.0.0.1:<PORT>.",
                                    "required": [
                                        "enabled",
                                        "port"
                                    ],
                                    "additionalProperties": false,
                                    "properties": {
                                        "enabled": {
                                            "type": "boolean",
                                            "title": "Enable local registry caches",
                                            "description": "Flag to enable local registry cache.",
                                            "default": false
                                        },
                                        "mirroredRegistries": {
                                            "type": "array",
                                            "title": "Registries to cache locally",
                                            "description": "A list of registries that should be cached.",
                                            "items": {
                                                "type": "string"
                                            },
                                            "default": []
                                        },
                                        "port": {
                                            "type": "integer",
                                            "title": "Local port for the registry cache",
                                            "description": "Port for the local registry cache under: http://127.0.0.1:<PORT>.",
                                            "default": 32767
                                        }
                                    }
                                },
                                "managementClusterRegistryCache": {
                                    "type": "object",
                                    "title": "Management cluster registry cache",
                                    "description": "Caching container registry on a management cluster level.",
                                    "required": [
                                        "enabled"
                                    ],
                                    "additionalProperties": false,
                                    "properties": {
                                        "enabled": {
                                            "type": "boolean",
                                            "title": "Enabled",
                                            "description": "Enabling this will configure containerd to use management cluster's Zot registry service. To make use of it as a pull-through cache, you also have to specify registries to cache images for.",
                                            "default": true
                                        },
                                        "mirroredRegistries": {
                                            "type": "array",
                                            "title": "Registries to cache",
                                            "description": "Here you must specify each registry to cache container images for. Please also make sure to have an entry for each registry in Global > Components > Containerd > Container registries.",
                                            "items": {
                                                "type": "string"
                                            },
                                            "default": []
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "connectivity": {
                    "type": "object",
                    "title": "Connectivity",
                    "description": "Configurations related to cluster connectivity such as container registries.",
                    "required": [
                        "baseDomain",
                        "network"
                    ],
                    "additionalProperties": false,
                    "properties": {
                        "baseDomain": {
                            "type": "string",
                            "title": "Base DNS domain"
                        },
                        "containerRegistries": {
                            "type": "object",
                            "title": "Container registries",
                            "description": "Endpoints and credentials configuration for container registries.",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "required": [
                                        "endpoint"
                                    ],
                                    "additionalProperties": false,
                                    "properties": {
                                        "credentials": {
                                            "type": "object",
                                            "title": "Credentials",
                                            "description": "Credentials for the endpoint.",
                                            "additionalProperties": false,
                                            "properties": {
                                                "auth": {
                                                    "type": "string",
                                                    "title": "Auth",
                                                    "description": "Base64-encoded string from the concatenation of the username, a colon, and the password."
                                                },
                                                "identitytoken": {
                                                    "type": "string",
                                                    "title": "Identity token",
                                                    "description": "Used to authenticate the user and obtain an access token for the registry."
                                                },
                                                "password": {
                                                    "type": "string",
                                                    "title": "Password",
                                                    "description": "Used to authenticate for the registry with username/password."
                                                },
                                                "username": {
                                                    "type": "string",
                                                    "title": "Username",
                                                    "description": "Used to authenticate for the registry with username/password."
                                                }
                                            }
                                        },
                                        "endpoint": {
                                            "type": "string",
                                            "title": "Endpoint",
                                            "description": "Endpoint for the container registry."
                                        }
                                    }
                                }
                            },
                            "default": {}
                        },
                        "localRegistryCache": {
                            "type": "object",
                            "title": "Local registry cache",
                            "description": "Caching container registry within the cluster.",
                            "required": [
                                "enabled",
                                "port"
                            ],
                            "additionalProperties": false,
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "title": "Enable",
                                    "description": "Enabling this will deploy the Zot registry service in the cluster. To make use of it as a pull-through cache, you also have to specify registries to cache images for.",
                                    "default": false
                                },
                                "mirroredRegistries": {
                                    "type": "array",
                                    "title": "Registries to cache",
                                    "description": "Here you must specify each registry to cache container images for. Please also make sure to have an entry for each registry in Global > Components > Containerd > Container registries.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "default": []
                                },
                                "port": {
                                    "type": "integer",
                                    "title": "Service port",
                                    "description": "NodePort used by the local registry service.",
                                    "default": 32767
                                }
                            }
                        },
                        "network": {
                            "type": "object",
                            "title": "Network",
                            "required": [
                                "loadBalancers"
                            ],
                            "properties": {
                                "controlPlaneEndpoint": {
                                    "type": "object",
                                    "title": "Endpoint",
                                    "description": "Kubernetes API configuration.",
                                    "properties": {
                                        "host": {
                                            "type": "string",
                                            "title": "Host",
                                            "description": "IP for access to the Kubernetes API. Manually select an IP for kube API. Empty string for auto selection from the ipPoolName pool."
                                        },
                                        "ipPoolName": {
                                            "type": "string",
                                            "title": "Ip Pool Name",
                                            "description": "Ip for control plane will be drawn from this GlobalInClusterIPPool resource.",
                                            "default": "wc-cp-ips",
                                            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                                        },
                                        "port": {
                                            "type": "integer",
                                            "title": "Port number",
                                            "description": "Port for access to the Kubernetes API.",
                                            "default": 6443
                                        }
                                    }
                                },
                                "loadBalancers": {
                                    "type": "object",
                                    "title": "Load balancers",
                                    "description": "Loadbalancer IP source.",
                                    "additionalProperties": false,
                                    "properties": {
                                        "cidrBlocks": {
                                            "$ref": "#/$defs/cidrBlocks",
                                            "title": "Load Balancer subnets"
                                        },
                                        "ipPoolName": {
                                            "type": "string",
                                            "title": "Ip Pool Name",
                                            "description": "Ip for Service LB running in WC will be drawn from this GlobalInClusterIPPool resource.",
                                            "default": "svc-lb-ips",
                                            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
                                        },
                                        "numberOfIps": {
                                            "type": "integer",
                                            "title": "Number of LB IPs to reserve",
                                            "default": 3
                                        }
                                    }
                                },
                                "pods": {
                                    "type": "object",
                                    "title": "Pods",
                                    "required": [
                                        "cidrBlocks"
                                    ],
                                    "properties": {
                                        "cidrBlocks": {
                                            "$ref": "#/$defs/cidrBlocks",
                                            "title": "Pod subnets",
                                            "default": [
                                                "10.244.0.0/16"
                                            ]
                                        }
                                    }
                                },
                                "services": {
                                    "type": "object",
                                    "title": "Services",
                                    "required": [
                                        "cidrBlocks"
                                    ],
                                    "properties": {
                                        "cidrBlocks": {
                                            "$ref": "#/$defs/cidrBlocks",
                                            "title": "Service subnets",
                                            "default": [
                                                "172.31.0.0/16"
                                            ]
                                        }
                                    }
                                }
                            }
                        },
                        "proxy": {
                            "type": "object",
                            "title": "Proxy",
                            "description": "Whether/how outgoing traffic is routed through proxy servers.",
                            "additionalProperties": false,
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "title": "Enable"
                                },
                                "httpProxy": {
                                    "type": "string",
                                    "title": "HTTP proxy",
                                    "description": "HTTP proxy - To be passed to the HTTP_PROXY environment variable in all hosts."
                                },
                                "httpsProxy": {
                                    "type": "string",
                                    "title": "HTTPS proxy",
                                    "description": "HTTPS proxy - To be passed to the HTTPS_PROXY environment variable in all hosts."
                                },
                                "noProxy": {
                                    "type": "string",
                                    "title": "No proxy",
                                    "description": "No proxy - Comma-separated addresses to be passed to the NO_PROXY environment variable in all hosts."
                                }
                            }
                        }
                    }
                },
                "controlPlane": {
                    "type": "object",
                    "title": "Control plane",
                    "additionalProperties": false,
                    "properties": {
                        "machineHealthCheck": {
                            "$ref": "#/$defs/machineHealthCheck",
                            "description": "Machine health check configuration for control plane nodes."
                        },
                        "machineTemplate": {
                            "type": "object",
                            "title": "Template to define control plane nodes",
                            "required": [
                                "network"
                            ],
                            "additionalProperties": true,
                            "properties": {
                                "cloneMode": {
                                    "$ref": "#/$defs/cloneMode",
                                    "description": "VM template cloning method."
                                },
                                "diskGiB": {
                                    "$ref": "#/$defs/diskGiB",
                                    "description": "Control plane node root volume size, in GB."
                                },
                                "memoryMiB": {
                                    "$ref": "#/$defs/memoryGiB",
                                    "description": "Control plane memory size, in MB.",
                                    "default": 8192
                                },
                                "network": {
                                    "$ref": "#/$defs/network",
                                    "description": "Control plane node network configuration."
                                },
                                "numCPUs": {
                                    "$ref": "#/$defs/numCPUs",
                                    "description": "Control plane CPU count.",
                                    "default": 4
                                },
                                "resourcePool": {
                                    "$ref": "#/$defs/resourcePool",
                                    "description": "Name of the resource pool to use."
                                },
                                "template": {
                                    "$ref": "#/$defs/template",
                                    "description": "Full name of the VM template."
                                }
                            }
                        },
                        "oidc": {
                            "type": "object",
                            "title": "OIDC authentication",
                            "additionalProperties": false,
                            "properties": {
                                "caPem": {
                                    "type": "string",
                                    "title": "Certificate authority file",
                                    "description": "Path to identity provider's CA certificate in PEM format."
                                },
                                "clientId": {
                                    "type": "string",
                                    "title": "Client ID",
                                    "description": "OIDC client identifier to identify with."
                                },
                                "groupsClaim": {
                                    "type": "string",
                                    "title": "Groups claim",
                                    "description": "Name of the identity token claim bearing the user's group memberships."
                                },
                                "issuerUrl": {
                                    "type": "string",
                                    "title": "Issuer URL",
                                    "description": "URL of the provider which allows the API server to discover public signing keys, not including any path. Discovery URL without the '/.well-known/openid-configuration' part."
                                },
                                "usernameClaim": {
                                    "type": "string",
                                    "title": "Username claim",
                                    "description": "Name of the identity token claim bearing the unique user identifier."
                                }
                            }
                        },
                        "replicas": {
                            "type": "integer",
                            "title": "Number of nodes",
                            "minimum": 1
                        }
                    }
                },
                "managementCluster": {
                    "type": "string",
                    "title": "Management cluster",
                    "description": "Name of the Cluster API cluster managing this workload cluster."
                },
                "metadata": {
                    "type": "object",
                    "title": "Metadata",
                    "additionalProperties": false,
                    "properties": {
                        "description": {
                            "type": "string",
                            "title": "Cluster description",
                            "description": "User-friendly description of the cluster's purpose."
                        },
                        "labels": {
                            "type": "object",
                            "title": "Labels",
                            "description": "These labels are added to the Kubernetes resources defining this cluster.",
                            "additionalProperties": false,
                            "patternProperties": {
                                "^[a-zA-Z0-9/\\._-]+$": {
                                    "type": "string",
                                    "title": "Label",
                                    "maxLength": 63,
                                    "minLength": 0,
                                    "pattern": "^[a-zA-Z0-9\\._-]+$"
                                }
                            }
                        },
                        "name": {
                            "type": "string",
                            "title": "Cluster name"
                        },
                        "organization": {
                            "type": "string",
                            "title": "Organization"
                        },
                        "preventDeletion": {
                            "type": "boolean",
                            "title": "Prevent cluster deletion",
                            "default": false
                        },
                        "servicePriority": {
                            "type": "string",
                            "title": "Service priority",
                            "description": "The relative importance of this cluster.",
                            "$comment": "Defined in https://github.com/giantswarm/rfc/tree/main/classify-cluster-priority",
                            "enum": [
                                "highest",
                                "medium",
                                "lowest"
                            ],
                            "default": "highest"
                        }
                    }
                },
                "nodePools": {
                    "type": "object",
                    "title": "Node pools",
                    "description": "Groups of worker nodes with identical configuration.",
                    "additionalProperties": false,
                    "patternProperties": {
                        "^[a-z0-9-]{3,10}$": {
                            "type": "object"
                        }
                    },
                    "properties": {
                        "worker": {
                            "type": "object",
                            "title": "Default nodePool",
                            "required": [
                                "network"
                            ],
                            "additionalProperties": true,
                            "properties": {
                                "cloneMode": {
                                    "$ref": "#/$defs/cloneMode",
                                    "description": "VM template cloning method."
                                },
                                "diskGiB": {
                                    "$ref": "#/$defs/diskGiB",
                                    "description": "Worker node root volume size, in GB."
                                },
                                "machineHealthCheck": {
                                    "$ref": "#/$defs/machineHealthCheck",
                                    "description": "Machine health check configuration for worker nodes."
                                },
                                "memoryMiB": {
                                    "$ref": "#/$defs/memoryGiB",
                                    "description": "Worker memory size, in MB.",
                                    "default": 16896
                                },
                                "network": {
                                    "$ref": "#/$defs/network",
                                    "description": "Worker node network configuration."
                                },
                                "numCPUs": {
                                    "$ref": "#/$defs/numCPUs",
                                    "description": "Worker node CPU count.",
                                    "default": 6
                                },
                                "replicas": {
                                    "type": "integer",
                                    "title": "Number of nodes",
                                    "default": 2,
                                    "minimum": 1
                                },
                                "resourcePool": {
                                    "$ref": "#/$defs/resourcePool",
                                    "description": "Name of the resource pool to use."
                                },
                                "template": {
                                    "$ref": "#/$defs/template",
                                    "description": "Full name of the VM template."
                                }
                            }
                        }
                    }
                },
                "podSecurityStandards": {
                    "type": "object",
                    "title": "Pod Security Standards",
                    "properties": {
                        "enforced": {
                            "type": "boolean",
                            "title": "Enforced Pod Security Standards",
                            "description": "Use PSSs instead of PSPs.",
                            "default": true
                        }
                    }
                },
                "providerSpecific": {
                    "type": "object",
                    "title": "Provider specific configuration",
                    "properties": {
                        "additionalVsphereClusterAnnotations": {
                            "type": "array",
                            "title": "Additional vsphere cluster annotations",
                            "description": "Additional annotations to be added to the vspherecluster custom resource.",
                            "items": {
                                "type": "string",
                                "examples": [
                                    "example.com/annotation: value"
                                ]
                            },
                            "default": []
                        },
                        "defaultStorageClass": {
                            "type": "object",
                            "title": "Default Storage Class",
                            "description": "Configuration of the default storage class.",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "title": "Enable default storage class",
                                    "description": "Creates a default storage class if set to true.",
                                    "default": true
                                },
                                "reclaimPolicy": {
                                    "type": "string",
                                    "title": "Reclaim Policy",
                                    "description": "Reclaim policy of the storage class (Delete or Retain).",
                                    "enum": [
                                        "Delete",
                                        "Retain"
                                    ],
                                    "default": "Delete"
                                },
                                "storagePolicyName": {
                                    "type": "string",
                                    "title": "Storage Policy name",
                                    "description": "Name of the vSphere storage policy to use in the storage class. Leave empty for no storage policy.",
                                    "default": ""
                                }
                            }
                        },
                        "templateSuffix": {
                            "type": "string",
                            "title": "Template suffix",
                            "description": "Suffix to append to the VM template name to find the correct template.",
                            "default": ""
                        },
                        "vcenter": {
                            "type": "object",
                            "title": "VCenter",
                            "description": "Configuration for vSphere API access.",
                            "properties": {
                                "datacenter": {
                                    "type": "string",
                                    "title": "Datacenter",
                                    "description": "Name of the datacenter to deploy nodes into."
                                },
                                "datastore": {
                                    "type": "string",
                                    "title": "Datastore",
                                    "description": "Name of the datastore for node disk storage."
                                },
                                "password": {
                                    "type": "string",
                                    "title": "Password",
                                    "description": "Password for the VSphere API."
                                },
                                "region": {
                                    "type": "string",
                                    "title": "Region",
                                    "description": "Category name in VSphere for topology.kubernetes.io/region labels."
                                },
                                "server": {
                                    "type": "string",
                                    "title": "Server",
                                    "description": "URL of the VSphere API."
                                },
                                "thumbprint": {
                                    "type": "string",
                                    "title": "Thumbprint",
                                    "description": "TLS certificate signature of the VSphere API."
                                },
                                "username": {
                                    "type": "string",
                                    "title": "Username",
                                    "description": "Username for the VSphere API."
                                },
                                "zone": {
                                    "type": "string",
                                    "title": "Zone",
                                    "description": "Category name in VSphere for topology.kubernetes.io/zone labels."
                                }
                            }
                        }
                    }
                },
                "release": {
                    "type": "object",
                    "title": "Release",
                    "description": "Information about the workload cluster release.",
                    "required": [
                        "version"
                    ],
                    "properties": {
                        "version": {
                            "type": "string",
                            "title": "Version"
                        }
                    }
                }
            }
        },
        "internal": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "kubectlImage": {
                    "type": "object",
                    "title": "Kubectl image",
                    "description": "Used by cluster-shared library chart to configure coredns in-cluster.",
                    "additionalProperties": false,
                    "properties": {
                        "name": {
                            "type": "string",
                            "title": "Repository",
                            "default": "giantswarm/kubectl"
                        },
                        "registry": {
                            "type": "string",
                            "title": "Registry",
                            "default": "gsoci.azurecr.io"
                        },
                        "tag": {
                            "type": "string",
                            "title": "Tag",
                            "default": "1.29.9"
                        }
                    }
                }
            }
        },
        "managementCluster": {
            "type": "string",
            "title": "Management cluster name"
        },
        "provider": {
            "type": "string",
            "title": "Provider name"
        }
    }
}
