{
	"$schema": "http://json-schema.org/schema#",
	"$defs": {
		"cidrBlocks": {
			"items": {
				"description": "IPv4 address range, in CIDR notation.",
				"pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(/([0-9]|[1,2][0-9]|[3][0-2]))?$",
				"examples": [
					"10.244.0.0/16"
				],
				"type": "string"
			},
			"type": "array",
			"minItems": 1
		},
		"featureGate": {
			"type": "object",
			"title": "Feature gate",
			"additionalProperties": false,
			"properties": {
				"enabled": {
					"type": "boolean",
					"title": "Enabled"
				},
				"name": {
					"type": "string",
					"title": "Name",
					"examples": [
						"UserNamespacesStatelessPodsSupport"
					],
					"pattern": "^[A-Za-z0-9]+$"
				}
			}
		}
	},
	"properties": {
		"global": {
			"type": "object",
			"title": "Properties that are available to all charts and subcharts.",
			"required": [
				"metadata"
			],
			"properties": {
				"connectivity": {
					"type": "object",
					"title": "Connectivity",
					"description": "Configurations related to cluster connectivity such as container registries.",
					"required": [
						"baseDomain",
						"network"
					],
					"additionalProperties": false,
					"properties": {
						"baseDomain": {
							"type": "string",
							"title": "Base DNS domain"
						},
						"containerRegistries": {
							"type": "object",
							"title": "Container registries",
							"description": "Endpoints and credentials configuration for container registries.",
							"additionalProperties": {
								"type": "array",
								"items": {
									"type": "object",
									"required": [
										"endpoint"
									],
									"additionalProperties": false,
									"properties": {
										"credentials": {
											"type": "object",
											"title": "Credentials",
											"description": "Credentials for the endpoint.",
											"additionalProperties": false,
											"properties": {
												"auth": {
													"type": "string",
													"title": "Auth",
													"description": "Base64-encoded string from the concatenation of the username, a colon, and the password."
												},
												"identitytoken": {
													"type": "string",
													"title": "Identity token",
													"description": "Used to authenticate the user and obtain an access token for the registry."
												},
												"password": {
													"type": "string",
													"title": "Password",
													"description": "Used to authenticate for the registry with username/password."
												},
												"username": {
													"type": "string",
													"title": "Username",
													"description": "Used to authenticate for the registry with username/password."
												}
											}
										},
										"endpoint": {
											"type": "string",
											"title": "Endpoint",
											"description": "Endpoint for the container registry."
										}
									}
								}
							},
							"default": {}
						},
						"network": {
							"properties": {
								"controlPlaneEndpoint": {
									"description": "Kubernetes API configuration.",
									"properties": {
										"host": {
											"title": "Host",
											"description": "IP for access to the Kubernetes API. Manually select an IP for kube API. Empty string for auto selection from the ipPoolName pool.",
											"type": "string"
										},
										"port": {
											"title": "Port number",
											"description": "Port for access to the Kubernetes API.",
											"type": "integer"
										},
										"ipPoolName": {
											"title": "Ip Pool Name",
											"description": "Ip for control plane will be drawn from this GlobalInClusterIPPool resource.",
											"type": "string",
											"pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
											"default": "wc-cp-ips"
										}
									},
									"title": "Endpoint",
									"type": "object"
								},
								"pods": {
									"properties": {
										"cidrBlocks": {
											"$ref": "#/$defs/cidrBlocks",
											"default": "10.244.0.0/16",
											"title": "Pod subnets"
										}
									},
									"required": [
										"cidrBlocks"
									],
									"title": "Pods",
									"type": "object"
								},
								"services": {
									"properties": {
										"cidrBlocks": {
											"$ref": "#/$defs/cidrBlocks",
											"default": "172.31.0.0/16",
											"title": "Service subnets"
										}
									},
									"required": [
										"cidrBlocks"
									],
									"title": "Services",
									"type": "object"
								},
								"loadBalancers": {
									"anyOf": [
										{
											"properties": {
												"cidrBlocks": {
													"$ref": "#/$defs/cidrBlocks",
													"title": "Load Balancer subnets"
												}
											},
											"required": ["cidrBlocks"]
										},
										{
											"properties": {
												"ipPoolName": {
													"title": "Ip Pool Name",
													"description": "Ip for Service LB running in WC will be drawn from this GlobalInClusterIPPool resource.",
													"type": "string",
													"pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
												}
											},
											"required": ["ipPoolName"]
										}
									],
									"title": "Load balancers",
									"type": "object"
								}
							},
							"required": [
								"pods",
								"services",
								"loadBalancers"
							],
							"title": "Network",
							"type": "object"
						},
						"proxy": {
							"type": "object",
							"title": "Proxy",
							"description": "Whether/how outgoing traffic is routed through proxy servers.",
							"additionalProperties": false,
							"properties": {
								"enabled": {
									"type": "boolean",
									"title": "Enable"
								},
								"secretName": {
									"type": "string",
									"title": "Secret name",
									"description": "Name of a secret resource used by containerd to obtain the HTTP_PROXY, HTTPS_PROXY, and NO_PROXY environment variables. If empty the value will be defaulted to <clusterName>-cluster-values.",
									"pattern": "^[a-z0-9-]{0,63}$"
								}
							}
						},
						"shell": {
							"type": "object",
							"title": "Shell access",
							"additionalProperties": false,
							"properties": {
								"osUsers": {
									"type": "array",
									"title": "OS Users",
									"description": "Configuration for OS users in cluster nodes.",
									"items": {
										"type": "object",
										"title": "User",
										"required": [
											"name"
										],
										"additionalProperties": false,
										"properties": {
											"name": {
												"type": "string",
												"title": "Name",
												"description": "Username of the user.",
												"minLength": 2,
												"pattern": "^[a-z][-a-z0-9]+$"
											},
											"sudo": {
												"type": "string",
												"title": "Sudoers configuration",
												"description": "Permissions string to add to /etc/sudoers for this user."
											}
										}
									},
									"default": [
										{
											"name": "giantswarm",
											"sudo": "ALL=(ALL) NOPASSWD:ALL"
										}
									]
								},
								"sshTrustedUserCAKeys": {
									"type": "array",
									"title": "Trusted SSH cert issuers",
									"description": "CA certificates of issuers that are trusted to sign SSH user certificates.",
									"items": {
										"type": "string"
									},
									"default": [
										"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIM4cvZ01fLmO9cJbWUj7sfF+NhECgy+Cl0bazSrZX7sU vault-ca@vault.operations.giantswarm.io"
									]
								}
							}
						}
					}
				},
				"controlPlane": {
					"type": "object",
					"title": "Control plane",
					"additionalProperties": false,
					"properties": {
						"image": {
							"type": "object",
							"title": "Node container image",
							"additionalProperties": false,
							"properties": {
								"repository": {
									"type": "string",
									"title": "Repository",
									"default": "gsoci.azurecr.io/giantswarm"
								}
							}
						},
						"machineTemplate": {
							"type": "object",
							"title": "Template to define control plane nodes",
							"additionalProperties": false,
							"required": [
								"network"
							],
							"properties": {
								"cloneMode": {
									"type": "string",
									"title": "Template clone mode",
									"description": "VM template cloning method.",
									"default": "linkedClone"
								},
								"diskGiB": {
									"type": "integer",
									"title": "Disk size",
									"description": "Control plane node root volume size, in GB.",
									"minimum": 25
								},
								"memoryMiB": {
									"type": "integer",
									"title": "Memory size",
									"description": "Control plane memory size, in MB.",
									"default": 8192,
									"minimum": 8192
								},
								"network": {
									"type": "object",
									"title": "Network configuration",
									"description": "Control plane node network configuration.",
									"additionalProperties": false,
									"properties": {
										"devices": {
											"type": "array",
											"title": "Network devices",
											"description": "Control plane node network devices.",
											"additionalProperties": false,
											"items": {
												"type": "object",
												"title": "Devices",
												"required": [
													"networkName"
												],
												"additionalProperties": false,
												"properties": {
													"dhcp4": {
														"type": "boolean",
														"title": "IPv4 DHCP",
														"description": "Is DHCP enabled on this segment.",
														"default": true
													},
													"networkName": {
														"type": "string",
														"title": "Segment name",
														"description": "Segment name to attach nodes to. Must already exist."
													}
												}
											}
										}
									}
								},
								"numCPUs": {
									"type": "integer",
									"title": "Number of CPUs",
									"description": "Control plane CPU count.",
									"default": 4,
									"minimum": 2
								},
								"resourcePool": {
									"type": "string",
									"title": "Resource pool name",
									"description": "Name of the resource pool to use.",
									"default": "*/Resources"
								},
								"template": {
									"type": "string",
									"title": "VM template",
									"description": "Full name of the VM template.",
									"default": "flatcar-stable-3602.2.1-kube-v1.25.16-gs"
								}
							}
						},
						"replicas": {
							"title": "Number of nodes",
							"type": "integer",
							"minimum": 1
						},
						"resourceRatio": {
							"type": "integer",
							"title": "Resource ratio",
							"description": "Ratio between node resources and apiserver resource requests.",
							"default": 8,
							"minimum": 8
						},
						"oidc": {
							"type": "object",
							"title": "OIDC authentication",
							"additionalProperties": false,
							"properties": {
								"caFile": {
									"type": "string",
									"title": "Certificate authority file",
									"description": "Path to identity provider's CA certificate in PEM format."
								},
								"clientId": {
									"type": "string",
									"title": "Client ID",
									"description": "OIDC client identifier to identify with."
								},
								"groupsClaim": {
									"type": "string",
									"title": "Groups claim",
									"description": "Name of the identity token claim bearing the user's group memberships."
								},
								"groupsPrefix": {
									"type": "string",
									"title": "Groups prefix",
									"description": "Prefix prepended to groups values to prevent clashes with existing names."
								},
								"issuerUrl": {
									"type": "string",
									"title": "Issuer URL",
									"description": "URL of the provider which allows the API server to discover public signing keys, not including any path. Discovery URL without the '/.well-known/openid-configuration' part."
								},
								"usernameClaim": {
									"type": "string",
									"title": "Username claim",
									"description": "Name of the identity token claim bearing the unique user identifier."
								},
								"usernamePrefix": {
									"type": "string",
									"title": "Username prefix",
									"description": "Prefix prepended to username values to prevent clashes with existing names."
								}
							}
						}
					}
				},
				"metadata": {
					"type": "object",
					"title": "Metadata",
					"additionalProperties": false,
					"properties": {
						"description": {
							"type": "string",
							"title": "Cluster description",
							"description": "User-friendly description of the cluster's purpose."
						},
						"labels": {
							"type": "object",
							"title": "Labels",
							"description": "These labels are added to the Kubernetes resources defining this cluster.",
							"additionalProperties": false,
							"patternProperties": {
								"^[a-zA-Z0-9/\\._-]+$": {
									"type": "string",
									"title": "Label",
									"maxLength": 63,
									"minLength": 0,
									"pattern": "^[a-zA-Z0-9\\._-]+$"
								}
							}
						},
						"organization": {
							 "type": "string",
							  "title": "Organization"
						},
						"preventDeletion": {
							"type": "boolean",
							"title": "Prevent cluster deletion",
							"default": false
						},
						"servicePriority": {
							"type": "string",
							"title": "Service priority",
							"description": "The relative importance of this cluster.",
							"$comment": "Defined in https://github.com/giantswarm/rfc/tree/main/classify-cluster-priority",
							"enum": [
								"highest",
								"medium",
								"lowest"
							],
							"default": "highest"
						}
					}
				},
				"nodeClasses": {
					"type": "object",
					"title": "Template to define control plane nodes",
					"properties": {
						"default": {
							"type": "object",
							"title": "Default node class configuration.",
							"additionalProperties": false,
							"properties": {
								"cloneMode": {
									"type": "string",
									"title": "Template clone mode",
									"description": "VM template cloning method.",
									"default": "linkedClone"
								},
								"diskGiB": {
									"type": "integer",
									"title": "Disk size",
									"description": "Control plane node root volume size, in GB.",
									"minimum": 25
								},
								"memoryMiB": {
									"type": "integer",
									"title": "Memory size",
									"description": "Control plane memory size, in MB.",
									"default": 16896,
									"minimum": 8192
								},
								"network": {
									"type": "object",
									"title": "Network configuration",
									"description": "Control plane node network configuration.",
									"additionalProperties": false,
									"properties": {
										"devices": {
											"type": "array",
											"title": "Network devices",
											"description": "Control plane node network devices.",
											"additionalProperties": false,
											"items": {
												"type": "object",
												"title": "Devices",
												"required": [
													"networkName"
												],
												"additionalProperties": false,
												"properties": {
													"dhcp4": {
														"type": "boolean",
														"title": "IPv4 DHCP",
														"description": "Is DHCP enabled on this segment.",
														"default": true
													},
													"networkName": {
														"type": "string",
														"title": "Segment name",
														"description": "Segment name to attach nodes to. Must already exist."
													}
												}
											}
										}
									}
								},
								"numCPUs": {
									"type": "integer",
									"title": "Number of CPUs",
									"description": "Control plane CPU count.",
									"default": 6,
									"minimum": 2
								},
								"resourcePool": {
									"type": "string",
									"title": "Resource pool name",
									"description": "Name of the resource pool to use.",
									"default": "*/Resources"
								},
								"template": {
									"type": "string",
									"title": "VM template",
									"description": "Full name of the VM template.",
									"default": "flatcar-stable-3602.2.1-kube-v1.25.16-gs"
								}

							}
						}
					}
				},
				"nodePools": {
					"type": "object",
					"title": "Node pools",
					"description": "Groups of worker nodes with identical configuration.",
					"additionalProperties": false,
					"patternProperties": {
						"^[a-z0-9-]{3,10}$": {
							"type": "object",
							"additionalProperties": false,
							"properties": {
								"class": {
									"type": "string",
									"title": "Node class",
									"description": "A valid node class name.",
									"pattern": "^[a-z0-9-]+$"
								},
								"replicas": {
									"type": "integer",
									"title": "Number of nodes",
									"default": 1,
									"minimum": 1
								}
							}
						}
					},
					"properties": {
						"worker": {
							"type": "object",
							"title": "Default nodePool",
							"additionalProperties": false,
							"properties": {
								"class": {
									"type": "string",
									"title": "Node class",
									"description": "A valid node class name.",
									"default": "default"
								},
								"replicas": {
									"type": "integer",
									"title": "Number of nodes",
									"default": 2,
									"minimum": 1
								}
							}
						}
					}
				},
				"podSecurityStandards": {
					"type": "object",
					"title": "Pod Security Standards",
					"properties": {
						"enforced": {
							"type": "boolean",
							"title": "Enforced Pod Security Standards",
							"description": "Use PSSs instead of PSPs.",
							"default": true
						}
					}
				},
				"providerSpecific": {
					"type": "object",
					"properties": {
						"vcenter": {
							"description": "Configuration for vSphere API access.",
							"properties": {
								"datacenter": {
									"description": "Name of the datacenter to deploy nodes into.",
									"title": "Datacenter",
									"type": "string"
								},
								"datastore": {
									"description": "Name of the datastore for node disk storage.",
									"title": "Datastore",
									"type": "string"
								},
								"server": {
									"description": "URL of the VSphere API.",
									"title": "Server",
									"type": "string"
								},
								"username": {
									"description": "Username for the VSphere API.",
									"title": "Username",
									"type": "string"
								},
								"password": {
									"description": "Password for the VSphere API.",
									"title": "Password",
									"type": "string"
								},
								"thumbprint": {
									"description": "TLS certificate signature of the VSphere API.",
									"title": "Thumbprint",
									"type": "string"
								},
								"region": {
									"description": "Category name in VSphere for topology.kubernetes.io/region labels.",
									"title": "Region",
									"type": "string"
								},
								"zone": {
									"description": "Category name in VSphere for topology.kubernetes.io/zone labels.",
									"title": "Zone",
									"type": "string"
								}
							},
							"title": "VCenter",
							"type": "object"
						}
					}
				}
			}
		},
		"internal": {
			"type": "object",
			"additionalProperties": false,
			"properties": {
				"apiServer": {
					"type": "object",
					"properties": {
						"enableAdmissionPlugins": {
							"type": "array",
							"title": "Admission plugins",
							"description": "List of admission plugins to be passed to the API server via the --enable-admission-plugins flag.",
							"items": {
								"type": "string",
								"title": "Plugin",
								"examples": [
									"DefaultStorageClass",
									"Priority"
								],
								"pattern": "^[A-Za-z0-9]+$"
							},
							"default": [
								"DefaultStorageClass",
								"DefaultTolerationSeconds",
								"LimitRanger",
								"MutatingAdmissionWebhook",
								"NamespaceLifecycle",
								"PersistentVolumeClaimResize",
								"Priority",
								"ResourceQuota",
								"ServiceAccount",
								"ValidatingAdmissionWebhook"
							]
						},
						"certSANs": {
							"type": "array",
							"title": "Subject alternative names (SAN)",
							"description": "Alternative names to encode in the API server's certificate.",
							"items": {
								"title": "SAN",
								"type": "string"
							},
							"default": []
						},
						"featureGates": {
							"type": "array",
							"title": "Feature gates",
							"description": "API server feature gate activation/deactivation.",
							"items": {
								"$ref": "#/$defs/featureGate"
							},
							"default": []
						}
					}
				},
				"ciliumNetworkPolicy": {
					"type": "object",
					"title": "CiliumNetworkPolicies",
					"properties": {
						"enabled": {
							"type": "boolean",
							"title": "Enable CiliumNetworkPolicies",
							"description": "Installs the network-policies-app (deny all by default) if set to true",
							"default": true
						}
					}
				},
				"controllerManager": {
					"type": "object",
					"title": "Controller manager",
					"additionalProperties": false,
					"properties": {
						"featureGates": {
							"type": "array",
							"title": "Feature gates",
							"description": "Controller manager feature gate activation/deactivation.",
							"items": {
								"$ref": "#/$defs/featureGate"
							},
							"default": []
						}
					}
				},
				"kubectlImage": {
					"type": "object",
					"title": "Kubectl image",
					"description": "Used by cluster-shared library chart to configure coredns in-cluster.",
					"additionalProperties": false,
					"properties": {
						"name": {
							"type": "string",
							"title": "Repository",
							"default": "giantswarm/kubectl"
						},
						"registry": {
							"type": "string",
							"title": "Registry",
							"default": "gsoci.azurecr.io"
						},
						"tag": {
							"type": "string",
							"title": "Tag",
							"default": "1.25.15"
						}
					}
				},
				"kubernetesVersion": {
					"title": "Kubernetes version",
					"default": "v1.25.16",
					"description": "Kubernetes version to deploy. Must match the version available in the image defined at template.",
					"type": "string"
				},
				"enableEncryptionProvider": {
					"title": "API server encryption at REST",
					"description": "Enable encryption at REST feature of API server.",
					"type": "boolean"
				},
				"teleport": {
					"type": "object",
					"title": "Teleport",
					"properties": {
						"proxyAddr": {
							"type": "string",
							"title": "Teleport proxy address",
							"default": "teleport.giantswarm.io:443"
						},
						"version": {
							"type": "string",
							"title": "Teleport version",
							"default": "14.1.3"
						},
						"enabled": {
							"type": "boolean",
							"title": "Enable teleport",
							"default": true
						}
					}
				},
				"sandboxContainerImage": {
					"type": "object",
					"title": "Sandbox Container image",
					"properties": {
						"name": {
							"type": "string",
							"title": "Repository",
							"default": "tkg/pause"
						},
						"registry": {
							"type": "string",
							"title": "Registry",
							"default": "projects.registry.vmware.com/"
						},
						"tag": {
							"type": "string",
							"title": "Tag",
							"default": "3.7"
						}
					}
				}
			}
		},
		"kubeadm": {
			"properties": {
				"users": {
					"items": {
						"properties": {
							"authorizedKeys": {
								"items": {
									"title": "Key",
									"type": "string"
								},
								"title": "Authorized keys",
								"type": "array"
							},
							"name": {
								"title": "Name",
								"type": "string"
							}
						},
						"type": "object"
					},
					"title": "Users",
					"type": "array"
				}
			},
			"title": "Kubeadm",
			"type": [
				"null",
				"object"
			]
		},
		"kubectlImage": {
			"description": "Used by cluster-shared library chart to configure coredns in-cluster.",
			"properties": {
				"name": {
					"type": "string"
				},
				"registry": {
					"type": "string"
				},
				"tag": {
					"type": "string"
				}
			},
			"title": "Kubectl image",
			"type": "object"
		},
		"organization": {
			"title": "Organization",
			"description": "The organization which owns this cluster",
			"type": "string"
		},
		"template": {
			"description": "Provisioning options for node templates.",
			"properties": {
				"cloneMode": {
					"description": "Method used to clone template image.",
					"title": "Clone mode",
					"type": "string"
				},
				"diskGiB": {
					"description": "Node disk size in GB. Must be at least as large as the source image.",
					"title": "Disk size (GB)",
					"type": "integer"
				},
				"folder": {
					"description": "VSphere folder to deploy instances in. Must already exist.",
					"title": "Folder",
					"type": "string"
				},
				"memoryMiB": {
					"description": "Node memory allocation in MB.",
					"title": "Memory (MB)",
					"type": "integer"
				},
				"networkName": {
					"description": "Segment name to attach nodes to. Must already exist.",
					"title": "Segment name",
					"type": "string"
				},
				"numCPUs": {
					"description": "Number of CPUs to assign per node.",
					"title": "CPU cores",
					"type": "integer"
				},
				"resourcePool": {
					"description": "Resource pool to allocate nodes from. Must already exist.",
					"title": "Resource pool",
					"type": "string"
				},
				"storagePolicyName": {
					"description": "Storage policy to use. If specified, it must already exist.",
					"title": "Storage policy",
					"type": "string"
				},
				"templateName": {
					"description": "Image template name to use for nodes.",
					"title": "Name",
					"type": "string"
				}
			},
			"title": "Node template",
			"type": "object"
		},
		"worker": {
			"properties": {
				"replicas": {
					"title": "Number of nodes",
					"type": "integer"
				}
			},
			"title": "Worker",
			"type": "object"
		}
	},
	"type": "object"
}
